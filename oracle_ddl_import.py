#!/usr/bin/python3
import os
import argparse
import configparser
import oracledb
import re
import io

# -----------------------------
# 安全拆分 SQL 文件
# -----------------------------
def split_sql_statements(sql_text):
    """
    安全拆分 SQL 文件为独立语句。
    忽略字符串引号中的分号，避免 COMMENT 中多行字符串被截断。
    """
    statements = []
    buffer = io.StringIO()
    in_quote = False
    escape = False

    for char in sql_text:
        if char == "'" and not escape:
            in_quote = not in_quote
        elif char == ";" and not in_quote:
            stmt = buffer.getvalue().strip()
            if stmt:
                statements.append(stmt)
            buffer = io.StringIO()
            continue
        elif char == "\\":
            escape = not escape
        else:
            escape = False
        buffer.write(char)

    # 收尾部分
    last_stmt = buffer.getvalue().strip()
    if last_stmt:
        statements.append(last_stmt)
    return statements


# -----------------------------
# 解析命令行参数
# -----------------------------
parser = argparse.ArgumentParser(description="导入 Oracle DDL 文件")
group = parser.add_mutually_exclusive_group(required=True)
group.add_argument('--ddl', action='store_true', help='仅导入非 foreign_keys 的 DDL 文件')
group.add_argument('--foreign-keys', action='store_true', help='仅导入 foreign_keys 的 DDL 文件')
args = parser.parse_args()

# -----------------------------
# 读取配置文件
# -----------------------------
config = configparser.ConfigParser()
config.read('config.ini')

oracle_conf = config['oracledb']
username = oracle_conf.get('username').strip()
password = oracle_conf.get('password').strip()
host = oracle_conf.get('host').strip()
port = oracle_conf.get('port').strip()
service_name = oracle_conf.get('service_name').strip()

# -----------------------------
# 构建 Oracle 连接
# -----------------------------
try:
    conn = oracledb.connect(user=username, password=password, dsn=f"{host}:{port}/{service_name}")
    print("✅ 成功连接到 Oracle 数据库")
except oracledb.Error as e:
    print("❌ Oracle 数据库连接失败:", e)
    exit(1)

cursor = conn.cursor()

ddl_dir = 'oracle_schema_ddl'

# -----------------------------
# 正则：修复 NOT NULL GENERATED IDENTITY 顺序
# -----------------------------
pattern = re.compile(
    r'(NOT NULL\s+GENERATED BY DEFAULT AS IDENTITY)|(GENERATED BY DEFAULT AS IDENTITY\s+NOT NULL)',
    re.IGNORECASE
)

# -----------------------------
# 遍历目录并执行 SQL
# -----------------------------
for filename in sorted(os.listdir(ddl_dir)):
    if not filename.endswith('.oracle.sql'):
        continue

    is_fk = 'foreign_keys' in filename

    # 根据参数决定是否处理该文件
    if args.ddl and is_fk:
        continue
    if args.foreign_keys and not is_fk:
        continue

    file_path = os.path.join(ddl_dir, filename)
    print(f"\n📄 正在导入：{filename}")

    with open(file_path, 'r', encoding='utf-8') as f:
        sql_content = f.read()

    # 替换 IDENTITY 顺序
    sql_content = pattern.sub('GENERATED BY DEFAULT AS IDENTITY', sql_content)

    # 去除单行注释
    cleaned_sql = '\n'.join(
        line for line in sql_content.splitlines() if not line.strip().startswith('--')
    )

    # 使用安全拆分逻辑
    statements = split_sql_statements(cleaned_sql)

    # -----------------------------
    # 执行每条 SQL
    # -----------------------------
    for idx, stmt in enumerate(statements, 1):
        try:
            #print(f"\n➡️ Execute statement #{idx}:\n{stmt}")
            cursor.execute(stmt)
        except oracledb.DatabaseError as e:
            print(f"❌ 第 {idx} 条 SQL 执行失败 in {filename}:")
            print("   SQL 片段：", stmt[:120].replace('\n', ' '))
            print("   错误信息：", e)

# -----------------------------
# 提交并关闭连接
# -----------------------------
conn.commit()
cursor.close()
conn.close()
print("\n✅ 所有选定的 DDL 导入完成")
